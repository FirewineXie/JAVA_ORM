<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mybatis.dao.EmployeeMapper">

    <cache type="org.mybatis.caches.ehcache.EhcacheCache"></cache>
     <!--<cache eviction="FIFO" flushInterval="60000" readOnly="false" size="1024" ></cache>-->
    <!--
    eviction:缓存的回收策略：
        • LRU – 最近最少使用的：移除最长时间不被使用的对象。
        • FIFO – 先进先出：按对象进入缓存的顺序来移除它们。
        • SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。
        • WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。
        • 默认的是 LRU。
    flushInterval：缓存刷新间隔
        缓存多长时间清空一次，默认不清空，设置一个毫秒值
    readOnly:是否只读：
        true：只读；mybatis认为所有从缓存中获取数据的操作都是只读操作，不会修改数据。
                 mybatis为了加快获取速度，直接就会将数据在缓存中的引用交给用户。不安全，速度快
        false：非只读：mybatis觉得获取的数据可能会被修改。
                mybatis会利用序列化&反序列的技术克隆一份新的数据给你。安全，速度慢
    size：缓存存放多少元素；
    type=""：指定自定义缓存的全类名；
            实现Cache接口即可；
    -->

    <!--namespace : 名称空间 ； 指定为接口的全类名(接口为名称空间的动态绑定)
        id : 唯一标识
        resultType ： 返回值类型
        #{id} : 从专递过来的参数中取出id值
        public Employee getEmpById(Integer id);
        -->
    <!--public Map<Integer,Employee> getEmpByLastNameLikeReturnMap(String lastName);-->
    <select id="getEmpByLastNameLikeReturnMap" resultType="Employee">
        select * from tb1_employee where last_name like #{lastName}
    </select>

    <!--public Map<String ,Object> getEmpByIdReturnMap(Integer id);-->
    <select id="getEmpByIdReturnMap" resultType="map">
        select * from tb1_employee where id = #{id}
    </select>



    <!--public List<Employee> getEmpsByLastNameLike(String lastName);-->
    <!--resultType: 如果返回的是一个集合，要写集合中元素的类型-->
    <select id="getEmpsByLastNameLike" resultType="Employee">
        select * from tb1_employee where last_name like #{lastName}
    </select>



    <!--public Employee getEmpByMap(Map<String,Object> map);-->
    <select id="getEmpByMap" resultType="Employee">
         select * from ${tableName} where id = #{id} and last_name=#{lastName}
    </select>
    <!--public Employee getEmpByIdAndLastName(Integer id,String lastName);-->
    <select id="getEmpByIdAndLastName" resultType="employee">
        select * from tb1_employee where id = #{id} and last_name=#{lastName}
    </select>
    <!--尽量bean里面的属性与数据表中的字段一致，当不一致的情况出现，可以在sql映射文件中添加别名，-->
    <select id="getEmpById" resultType="employee"
            databaseId="mysql">
select * from tb1_employee where id = #{id}
</select>
    <select id="getEmpById" resultType="employee"
            databaseId="oracle">
      select * from tb1_employee where id = #{id}
    </select>
    <!--id,last_name lastName,email,gender-->


    <!--public void addEmp(Employee employee);-->
    <insert id="addEmp" parameterType="Employee"
            useGeneratedKeys="true" keyProperty="id" databaseId="mysql">
        insert into  tb1_employee(last_name,email,gender)
        values (#{lastName},#{email},#{gender})
    </insert>
    <!--
        Oracle 不支持自增：Oracle使用序列来模拟自增
        每次插入的数据的主键是从序列中拿到的值，如何获取到这个值
    -->
    <!--插入的主键是从序列中拿到的
        order="BEFORE"
            before 表示在sql查询之前运行
            after ： 当前sql在插入sql之后运行
        resutltType : 查出数据的返回值类型

        before运行顺序：
                先运行selectkey查询id，并封装javabean的id属性
                在运行的sql，就可以取出id属性对应的值-->
    <!--<insert id="addEmp" databaseId="oracle">-->
<!--&#45;&#45;         keyProperty:查出的主键封装给javaBean的那个属性-->
    <!--<selectKey keyProperty="id" order="BEFORE" resultType="Interger">-->
            <!--&#45;&#45; 编写查询主键的sql语句-->
          <!--select EMPLOYEES_SEQ.nextval form dual-->
    <!--</selectKey>-->
        <!--insert into employee(EMPLOYEE_ID,LAST_NAME,EMAIL)-->
        <!--values (#{id},#{lastname},#{email});-->
    <!--</insert>-->
    <!--另外一种查询方法
        after 运行程序
            先运行插入的sql，获取新值为id
            再运行selectKey查询id的sql-->
    <!--有一定的局限性-->
    <insert id="addEmp" databaseId="oracle">
    --         keyProperty:查出的主键封装给javaBean的那个属性
    <selectKey keyProperty="id" resultType="Interger">
        -- 编写查询主键的sql语句
        select EMPLOYEES_SEQ.currval form dual
    </selectKey>
    insert into employee(EMPLOYEE_ID,LAST_NAME,EMAIL)
    values (employees_seq.nextval,#{lastname},#{email});
</insert>
    <!--public void updateEmp(Employee employee);-->
    <update id="updateEmp" parameterType="Employee">
        update tb1_employee
        set last_name=#{lastName},email=#{email,jdbcType=NULL},gender=#{gender}
        where id=#{id}
    </update>
    <!--public void deleteEmpById(Integer id);-->
    <delete id="deleteEmpById" parameterType="Employee">
        delete form tb1_employee where id=#{id}
    </delete>
</mapper>