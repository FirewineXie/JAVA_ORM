<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mybatis.dao.DepartmentMapper">


    <!--public Department getDeptById(Integer id);-->
    <select id="getDeptById" resultType="com.mybatis.bean.Department">
        select id,dept_name departmentName from tb1_dept where id=#{id};
    </select>


    <!--
        collection嵌套结果集的方式，定义关联的集合类型

        嵌套结果集的方式，使用collection标签定义关联的集合类型的属性规则
    -->
    <resultMap id="MyDept" type="com.mybatis.bean.Department">
        <id column="did" property="id"/>
        <result column="dept_name" property="departmentName"/>
       <!--Collection 定义集合类型的属性的封装规则
                ofType：指定集合里面的元素类型-->
        <collection property="emps" ofType="com.mybatis.bean.Employee">
            <!--定义这个集合中元素的封装规则-->
            <id column="eid" property="id"/>
            <result column="last_name" property="lastName"/>
            <result column="email" property="email"/>
            <result column="gender" property="gender"/>
        </collection>
    </resultMap>


    <!--public Department getDeptByIdPlus(Integer id);-->
    <select id="getDeptByIdPlus" resultMap="MyDept">
        SELECT d.id did,d.dept_name dept_name,
				e.id eid,e.last_name last_name,e.email email,e.gender gender
		FROM tb1_dept d
		LEFT JOIN tb1_employee e
		ON d.id=e.d_id
		WHERE d.id=#{id}
    </select>



    <!--public Department getDeptByIdStep(Integer id);-->
    <resultMap id="MyDeptStep" type="com.mybatis.bean.Department">
        <id column="id" property="id"/>
        <result column="dept_name" property="departmentName"/>
        <collection property="emps" select="com.EmployeeMapperPlus.getEmpsByDeptId"
                    column="{deptId=id}"
                    fetchType="lazy">


        </collection>
    </resultMap>
    <select id="getDeptByIdStep" resultMap="MyDeptStep">
          select id,dept_name departmentName from tb1_dept where id=#{id};
    </select>

    <!--扩展 ： 多列的值传递过去
            将多列的值封装map传递；
            column="{key1=column1,key2=column2}"
            fetchType 延迟加载-->

</mapper>
